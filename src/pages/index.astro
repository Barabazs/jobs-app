---
import Layout from "../layouts/Layout.astro";
//import jobs from "@data/jobsdata.json";
import JobItem from "../components/JobItem.astro";
import { db, Openings, desc } from "astro:db";
const jobs = await db
  .select()
  .from(Openings)
  .orderBy(desc(Openings.created_at));

// Get all unique categories
const categories = [
	...new Set(jobs.map((job) => job.jobcategory.toLowerCase())),
];
---

<Layout title="Jobs.">
	<main class="middle-pane-medium flex flex-col gap-8 md:flex-row">
		<astro-side-filter
			class="flex flex-row md:w-64 md:flex-col w-full overflow-x-auto gap-2 md:gap-5"
		>
			<button
				data-filter="all"
				class="hover:bg-white rounded-full border hover:text-black min-w-44 min-h-10 transition duration-[1000ms] ease-in-out transform"
				>All</button
			>
			{
				categories.map((category) => (
					<button
						class="hover:bg-white capitalize font-bold rounded-full hover:text-black min-w-44 min-h-10  transition duration-[1000ms] ease-in-out transform"
						data-filter={category}
					>
						{category}
					</button>
				))
			}
		</astro-side-filter>
		<article class="grow transition-all duration-500">
			{jobs.map((post) => <JobItem item={post} />)}
		</article>
	</main>
</Layout>
<script>
	class AstroSideNav extends HTMLElement {
		constructor() {
			super();
			const buttons = this.querySelectorAll("button");
			const jobItems = document.querySelectorAll(".w3pn-event-item");
			buttons.forEach((button) => {
				const filter = button.dataset.filter;
				button.addEventListener("click", () => {
					buttons.forEach((button) => {
						button.classList.remove("border");
					});
					button.classList.add("border");
					jobItems.forEach((jobItem) => {
						jobItem.classList.add("hidden");
					});
					const selectedJobItems = document.querySelectorAll(
						`.w3pn-event-item.${filter}`,
					);
					selectedJobItems.forEach((jobItem) => {
						jobItem.classList.remove("hidden");
					});
				});
			});
		}
	}
	customElements.define("astro-side-filter", AstroSideNav);
</script>
